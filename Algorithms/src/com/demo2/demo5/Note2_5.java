package com.demo2.demo5;

/**
 * @author Cheung
 * @date 2021/4/15 10:51
 * 应用
 */
public class Note2_5 {
    /*
    应用：
        排序应用的一个重要原因：在一个有序的数组中查找一个元素要比在一个无序的数组中查找简单得多。
    2.5.1 将各种数据排序
        我们的实现的对象是由实现了Comparable接口的对象组成的数组。Java的约定使得我们能够利用Java的回调机制将任意实现了Comparable接口的数据类型排序。
        实现了Comparable接口只需要定义一个compareTo()函数并在其中定义该数据类型中的大小关系。我们的代码直接能够将String、Integer、double和一些其它的例如File和URL类型的数组排序，因为他们都实现了Comparable接口。
        同一段代码能够适应所有这些类型的数据是非常方便的，但一般的应用程序中需要排序的数据类型都是应用程序自己定义的。相应，在自定义的数据类型中实现一个compareTo()方法也是很常见的，这样就实现了Comparable接口，也就
        使得这种数据类型可以被排序了（也可以用其构造优先队列）。
        2.5.1.1 交易事务
        2.5.1.2 指针事务
            我们使用的方法在经典教材中被称为指针排序，因为我们只处理元素的引用而不移动数据本身。
            在Java中，除了原始数字类型之外，我们操作的总是数据的引用（指针），而非数据本身。指针排序增加了一层间接性，因为数组保存的是待排序的对象的引用，而非对象本身。
        2.5.1.3 不可变的键
            如果在排序后用例还能够修改键值，那么数组就很可能不再是有序的了。类似，优先队列在用例能够修改键值的情况下也不太可能正常工作。在Java中，可以用不可变的数据类型作为键来
            避免这个问题。大多数你可能用作键的数据类型，例如String、Integer、Double和File都是不可变的。
        2.5.1.4 廉价的交换
            使用引用的另一个好处是我们不必移动整个元素。对于元素大而键小的数组来说这带来的节约是巨大的，因为比较只需要访问元素的一小部分，而排序过程中元素的大部分都不会被访问到。












     */

}
