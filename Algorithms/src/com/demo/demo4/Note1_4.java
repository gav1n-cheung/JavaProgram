package com.demo.demo4;

/**
 * @author Cheung
 * @date 2021/3/30 10:58
 */
public class Note1_4 {
    /*
    我们将使用科学分析为算法成本建立简洁的模型并使用实验数据来验证这些模型

    1.4.1 科学方法
        科学家用来理解自然世界的方法对于研究计算机程序的运行时间同样有效：
            （1）细致地观察真实世界的特点，通常还需要有精确的测量
            （2）根据观察结果提出假设模型
            （3）根据模型预测未来的事件
            （4）继续观察并核实预测的准确性
            （5）如此反复直到确认预测和观察一致
        科学方法的一条关键原则是我们所设计的实验必须是可重现的，这样他人也可以自己验证假设的真实性。所有的假设也必须是可证伪的，
        这样我们才能确认某个假设是错误的（并需要修正）。我们无法知道某个假设是否绝对正确，我们只能验证她和我们观察的一致性。
    1.4.2 观察
        我们的第一个挑战是决定如何定量测量程序的运行时间。
        我们对大多数程序的第一个定量观察就是计算性任务的困难程度可以用问题的规模来衡量。一般来说，问题的规模可以是输入的大小或者某个命令行参数的值。
        根据直觉，程序的运行时间应该随着问题规模的增长而变长，但我们每次在开发和运行一个程序时想问的问题都是运行时间的增长有多快。
        从许多程序中得到的另一个定量观察是运行时间和输入本身相对无关，它主要取决于问题的规模。因此我们现在来重点研究如何更好地将问题规模和运行时间
        的关系量化。
        1.4.2.1 举例
        1.4.2.2 计时器
            准确测量给定程序的确切运行时间是很困难的，不过我们只需要近似值即可，我们想要将把几秒钟几分钟就能运行完毕的程序很一年几个月的程序区分开来，而且我们也想要知道
            对于同一个任务这段程序是否比另一程序运行快一倍。因此，我们仍然需要准确的测量手段来生成实验数据，并根据它们得出并验证关于成功内需的运行时间和
            问题规模的假设。为此我们使用了stopWatch()数据类型来测量程序的运行时间。
            见类【StopWatch】和测试用例【StopWatchTest】
        1.4.2.3 实验数据的分析
            公式T(N)=a*（N^b）幂次法则
    1.4.3 数学模型
        一个程序运行的总的时间主要和两点有关：
            （1）执行每条语句的耗时
            （2）执行每条语句的频率
        其中前者取决于计算机、java编译器和操作系统，后者取决于程序本身和输入。如果我们对于程序的所有部分我们都知道了这些性质，可以将它们相乘并将程序
        中所有指令的成本相加得到总运行时间。
        1.4.3.1 近似
            定义：我们用~f(N)表示所有随着N的增大除以f(N)的结果趋近于1的函数。我们用g(N)~f(N)表示g(N)/f(N)的增大趋近于1。
     */

}
